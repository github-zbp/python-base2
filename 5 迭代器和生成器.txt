本节介绍迭代器和生成器是为了协程而做准备的。 

一、迭代器（Iterator）
迭代器是一个对象。

python中有两种重要的和迭代相关的对象：可迭代对象(Iterable)和迭代器对象(Iterator)，这两个对象的类放在了abc基类中。

from collections.abc import Iterable,Iterator 

print(isinstance(a_list, Iterable))	# True
print(isinstance(a_list, Iterator))	# False

这说明列表是一个可迭代对象，但不是迭代器对象。

一个继承了迭代器对象(Iterator)的对象就是迭代器。
所以一个迭代器对象肯定是迭代器
一个可迭代对象不一定是迭代器

可迭代对象和迭代器对象的关系和区别：

1.可迭代对象：
可迭代的含义就是可以循环
所以可以进行for循环遍历的对象都是可迭代对象（列表可循环，所以是可迭代对象）

那么可迭代对象是如何实现可以for循环遍历的呢？
通过在类内部实现__iter__魔术方法,注意__iter__的返回值必须是一个iterator对象，否则会报错。

关于__getitem__方法：这个方法使得对象可以通过x[a]这种索引方式获取元素。
如果一个类没有实现__iter__方法，但是实现了__getitem__方法并且索引是从0开始的，那么这个对象也可以迭代（循环）

但是如果对象没有实现__iter__而实现了__getitem__，那么即使它是一个可迭代对象，在执行isinstance(obj, Iterable)也会返回false



3.迭代器对象：
可以通过next()函数获取容器中的元素的对象就是迭代器对象。该函数可以获取容器中的下一个元素。每次执行next()从迭代器取出元素的时候才会在内存中创建这个元素。

迭代器对象继承了可迭代对象，即Iterator是Iterable的子类。

所以Iterator也实现了 __iter__ 魔术方法，也可以进行for循环。在此基础上，Iterator对象还比Iterable对象多实现了一个抽象方法__next__。而这个__next__也是迭代器对象可以使用next()函数进行迭代的原因。


小结： 
实现了__iter__的对象是可迭代对象
实现了__iter__和__next__的对象是迭代器（对象）

list,dict,str,tuple,set 这些类型全都是可迭代对象，全都不是迭代器。


3.如何快速定义一个迭代器：
可以使用iter()函数构造一个迭代器
iterObj = iter([1,2,3,4,5])

iter()的内部实现：
a. 先检测对象是否实现了 __iter__ ，如果有系统就会调用对象的__iter__，__iter__的返回值必须是一个iterator对象。此时iter()就会把__iter__返回的迭代器对象返回给iterObj
b. 如果对象中没有__iter__就会检查有没有__getitem__，有则python会创建一个迭代器并返回
c. 如果没有__iter__和__getitem__则iter()报错。


4.可迭代对象和迭代器中__iter__和__next__的内部实现
可迭代对象中，__iter__只需一行，就是返回一个迭代器，这个迭代器需要自己定义
迭代器对象中，__iter__只需返回self自己，因为它自己就是一个迭代器；__next__需要实现返回一个元素以及在遍历完元素后抛出一个StopIteration异常。

下面就正式定义一个可迭代对象和迭代器
# coding=utf-8

# 这个Sentence类的作用很简单，能遍历句子中的每个单词即可
class Sentence:
    def __init__(self, sentence):
        self.sentence = sentence
        self.words = self.sentence.split()
        self.iterator = SentenceIterator(self.words)

    def __iter__(self):		# __iter__ 必须返回迭代器
        return self.iterator

class SentenceIterator:
    def __init__(self, words):
        self.words = words
        self.index = 0

    def __iter__(self):		# 迭代器中的__iter__要返回自己这个迭代器
        return self

    def __next__(self):     # __next__不接受其他参数，__next__要返回当前下标的元素以及在返回完所有元素时抛出StopIteration异常
        try:
            word = self.words[self.index]
            self.index += 1
            return word
        except:
            self.index = 0
            raise StopIteration

# sentence是一个可迭代对象，不是迭代器
sentence = Sentence("I am so handsome so that I have no friend")

for word in sentence:		# 遍历可迭代对象
    print(word)

for word in sentence:
    print(word)
	
==============================================
for循环的原理：
以上面的Sentence类为例：
执行for循环的时候，python会隐式执行iter(sentence),从而调用可迭代对象sentence的__iter__方法得到一个迭代器SentenceIterator，之后每循环一个元素就会调用一次SentenceIterator中的__next__获取到元素

假如sentence中没有定义 __iter__,但是定义了__getitem__,那么执行for的时候，就不会去调用__iter__，而是会每循环一个元素调用一次__getitem__

==============================================


上面这个程序其实有一个错误，每次进行迭代的时候，__iter__方法不应该返回相同的 SentenceIterator 迭代器，而是返回不同的 SentenceIterator 迭代器。所以代码应该改为：

class Sentence:
    def __init__(self, sentence):
        self.sentence = sentence
        self.words = self.sentence.split()

    def __iter__(self):		
        return SentenceIterator(self.words)

改为这样才对。

假如不这样改会有什么问题？可能会出现多次for遍历sentence的时候元素错乱(在单线程中当然不会，但是如果是在多线程中就会，原因是多个for循环共用一个 SentenceIterator 迭代器，实际上应该保证每次for循环时都生成一个新的迭代器，从而保证每个for循环中的迭代器时相互独立互不影响的)。

还有一点：Sentence中的__iter__每次被调用返回的都是一个新的不同的迭代器，但是迭代器 SentenceIterator 中的 __iter__每次被调用返回的都是相同的迭代器self。这也是为什么我们在上面使用for循环遍历 可迭代对象而不是遍历迭代器，因为遍历可迭代对象才能保证每次遍历所使用的都是独立的迭代器。



========================================

二、生成器（generator）

generator生成器是一种特殊的迭代器。

1.生成器函数
函数中有yield关键字，那么这个函数就是一个生成器函数。


生成器函数的特点：

普通函数返回值是return后面的值，但是生成器函数的返回值是一个生成器对象而不是return后的东西

例如：
def gen_func():
	yield 1
	yield 2
	yield 3
	
	return "abc"
	
def func():
	return "abc"

gen = gen_func()
res = func()

print(gen)	# 打印 <generator object gen_func at 0x000001CF3AC4D120>，是个生成器对象
print(res)	# 打印 abc


请注意：生成器函数不是生成器，生成器函数的返回值才是生成器。所以可以说生成器函数是生成器的工厂。



2.生成器
生成器也是一个迭代器，所以生成器也可以进行循环
def gen_func():
	print(123)
	print(456)

	yield 1		# 我们一般叫yield 1为生成1而不是返回1
	print("打印了1")
	yield 2
	print("打印了2")
	yield 3
	print("打印了3")
	
	return      # 这个return可写可不写	
	
gen = gen_func()	# 返回一个生成器
for i in gen:	# 遍历一个生成器对象
	# do something
	print("We can do something")
	print(i)	# 得到1 2 3
	
	
生成器的运行过程
遍历第一次时，内部会调用第一次next(gen)，gen_func就会开始执行gen_fun函数代码块的代码，执行了print 123和456，执行第一个yield，把yield生成的值1交给next()作为返回值。然后gen_func马上停止（此时print("打印了1")还未执行），并将上下文环境从函数的局部环境切换到全局环境，运行全局的代码，直到遍历下一个元素，调用第二次next，系统就又进入到生成器的环境继续往下执行代码，后面就重复上述过程。所以每调用一次next(gen)都会得到一个yield生成的值。

当最后一个yield执行完之后，又会马上停止，切换到全局环境for循环还会调用一次next(gen),此时环境又切换到gen_func中往后执行直到执行到return，就会引发一个 StopIteration 异常从而终止循环。

所以上述for循环实际上调用了4次next()。

迭代时，for机制其实和之前在迭代器中说的一样，会先调用g = iter(gen) 得到一个生成器对象，这个 g 其实就是 gen本身，因为gen内部的__iter__ 也是返回的self。
之后每次迭代时都会调用next(g)；
调用 iter(gen)的时候 gen_func函数代码块的代码还没开始执行；调用next(g)时才开始执行。

整个过程如下图所示：

也就是说yield和next()会让代码的运行在全局和函数的局部环境间不断切换。yield会跳出生成器函数切换到全局去执行代码，而next()会切换回生成器函数的环境去执行代码。

为了验证这个过程，我们改写一下 gen_func

def gen_func():
	print(123)		# 2s后全局环境中运行到第一个next()时开始打印123和456	
	print(456)

	yield 1			# 马上生成1，并停止，2s后才打印aaa
	print("aaa")
	yield 2			# 马上生成2，并停止，2s后才打印bbb
	print("bbb")
	yield 3			# 马上生成3，并停止，2s后才打印ccc
	print("ccc")	
	
	return      # 运行到这里会抛出一个StopIteration异常	
	
gen = gen_func()	# 不会执行函数中的代码

sleep(2)
print(next(gen))	# 打印了 123和456和1；next(gen)的返回值是1
sleep(2)
print(next(gen))    # 打印了 aaa 和 2
sleep(2)
print(next(gen))	# 打印了 bbb 和 3
sleep(2)
print(next(gen))    # 打印了 ccc 和 抛出StopIteration异常
	
总结：
调用生成器函数的时候不会执行函数代码块中的代码，而是会返回一个生成器。
只有在开始循环的时候才会开始执行代码块中的代码。
当函数代码块执行到yield的时候，会发生停止函数内的代码执行并将执行的上下文环境保存起来，然后切换到全局环境，主环境中执行到next()时会切换到函数内并读取上下文环境继续上一次的代码的执行
当函数代码块执行到return时，会抛出StopIteration异常停止循环。生成器函数return什么内容不重要，因为不论return什么内容这个内容都不会被返回出来。

yield的本质其实是一种流程控制的工具，他可以控制多个任务执行的切换。

有了上面的生成器知识，我们就可以改写一下Sentence这个可迭代对象了：
# coding=utf-8

# 基于生成器实现的可迭代对象

class Sentence:     # 这是一个可迭代对象的类
    def __init__(self, sentence):
        self.sentence = sentence
        self.words = self.sentence.split()

    # 直接将 __iter__ 方法定义成一个生成器函数
    def __iter__(self):
        for word in self.words:
            yield word

        return

# 无需定义一个迭代器类

sentence = Sentence("I am so handsome so that I have no friend")    # 返回一个可迭代对象

for w in sentence:
    print(w)


循环的时候隐式调用 iter(sentence) -> sentence.__iter__() -> __iter__是一个生成器函数返回一个生成器g，然后开始执行next(g)进行遍历。每次遍历都会接收yield生成的值赋值给变量w



3.生成器的惰性加载特性

上面的代码还是存在改进的地方的。假如传入Sentence类的sentence很长，有整整1个G，在执行 self.words = sentence.split()  的时候会在内存中多开辟1个G的空间存储self.words这个列表。

为了避免这种浪费内存的行为，我们可以做出以下改进：

# coding=utf-8

# 基于生成器实现的可迭代对象,懒加载,节省内存

class Sentence:     # 这是一个可迭代对象的类
    def __init__(self, sentence):
        self.sentence = sentence

    # 直接将 __iter__ 方法定义成一个生成器函数
    def __iter__(self):
        start_index = 0
        last_space_pos = 0
        while True:
            space_pos = self.sentence.find(" ", start_index)
            if space_pos != -1:
                yield self.sentence[start_index:space_pos]
                start_index = space_pos + 1
            else:
                yield self.sentence[start_index:]
                break
        return

# 无需定义一个迭代器类

sentence = Sentence("I am so handsome so that I have no friend")    # 返回一个可迭代对象

for word in sentence:
    print(word)
	
这么一来少使用了self.words这个列表来多存储一份sentence数据，节省了内存。但是每次遍历都要调用find，这么一来就增加了运算的时间成本。可以说是在用时间换空间。


4.生成器表达式
相比于生成器函数，生成器表达式是一种简单的创建生成器的方式。

例如 
gen_num = (i*3 for i in range(100000))		# 返回一个生成器

for i in gen_num:
	print(i)
给予生成器表达式的惰性加载特性，gen_num内部占用的内存空间远小于100000个数字的存储空间



下面再看一个例子：

def gen_AB():
	print("start")
	yield "A"
	print("continue")
	yield "B"
	print("end")
	
gen = (i*3 for i in gen_AB())			# 1

for ab in gen:			# 2
	print(ab)
	
当运行到#1的时候，没有任何的打印，说明在生成器表达式中运行for循环是不会调用生成器函数代码块内的代码。运行到#2的循环时才有了打印